<div class="modal fade" id="my-product-dialog-new" tabindex="-1">
	<div style="overflow: initial !important;" class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h3 id="title-form">Thêm mới sản phẩm</h2>
			</div>
			<form id="form-add" method="POST" enctype="multipart/form-data" >
				<div class="modal-body" style="height: 500px; overflow-y: auto;">
					<div class="form-row">
						<div class="col-md-7 col-mb-1">
							<label for="titleProduct">Tên sản phẩm</label>
							<input type="text" class="form-control" id="titleProduct" value="" placeholder="Tên sản phẩm" required/>
						</div>
          </div>
          <br>
					<div class="form-row">
            <div class="col-md-12">
              <label for="image">Ảnh sản phẩm</label>
              <div class="custom-file">
                <input type="file" name="myImage" class="custom-file-input" id="image"/>
                <label class="custom-file-label" for="image">Choose file</label>
              </div>
            </div>
          </div>
          <br>
					<div class="form-row">
						<div class="col-md-12">
							<label for="barcode">Barcode</label>
							<input type="text" class="form-control" id="barcode" value="" placeholder="Barcode" />
						</div>
          </div>
          <br>
					<div class="form-row">
						<div class="col-md-12">
							<label for="price">Giá</label>
							<input type="number" class="form-control" id="price" value="" placeholder="Giá" />
						</div>
          </div>
          <br>
          <div class="form-row">
						<div class="col-md-12">
							<label for="numbers">Số lượng</label>
							<input type="number" class="form-control" id="numbers" value="" placeholder="Số lượng" />
						</div>
					</div>
          <br>
					<div class="form-row">
						<div class="col-md-12">
							<label for="description">Mô tả</label>
								<textarea class="form-control" id="description"></textarea>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button class="btn btn-default btn-primary closemodal" type="submit" id="name-button">Tạo mới</button>
					<button class='btn btn-default btn-dark' id="closemodal" type ='button' data-dismiss="modal">Hủy bỏ</button>
				</div>
			</form>
		</div>
	</div>
</div>

<script>
  $(document).ready(() =>{
    // handle for create and edit button click
    $('.closemodal').on('click',()=>{
      $('#my-product-dialog-new').modal('toggle');
      $(".modal-backdrop").remove();
    });
     
    $(document).keyup((e) => {
      if (e.key === "Escape") { // escape key maps to keycode `27`
        $(".modal-backdrop").remove();
      }
    }); 

    // variable for CRUD and Create, update form.
    const titleForm = $('#title-form');
    const buttonName = $('#name-button');
    const display = $("#display") ;
    const form = $("#form-add");
    const titleProduct = $("#titleProduct");
    const imgUrl = $("#image");
    const price = $("#price");
    const numbers = $('#numbers');
    const barcode = $("#barcode");
    const description = $("#description");
    const closemodal = $("#closemodal");
    const modalNew = $("#my-product-dialog-new");
    const spinner = $('#spinner');

    spinner.hide();

    $(".custom-file-input").on("change", function() {
      const fileName = $(this).val().split("\\").pop();
      $(this).siblings(".custom-file-label").addClass("selected").html(fileName);
    });

    // api getProdudc with pageNo, size
    const getProducts = (pageNo,size) => {
      fetch(`/admin/getProducts?pageNo=${ pageNo }&size=${ size }`, { method: "get" })
        .then(response => response.json())
        .then(data => {
          displayProduct(data, pageNo, size);
      });
    }
    getProducts(1,10);

    $('#show_paginator').bootpag({
      total: 10,
      page: 1,
      maxVisible: 10
    }).on('page', function(event, num){
      getProducts(num,10);
    });

    // buildTemplate to show in table
    const buildTemplate = (product, ids) =>{
      
      return `
        <tr id="${ids.listItemID}">
          <td>${ids.stt}</td>
          <td id="${ids.productID}">${product.title}</td>
          <td id="${ids.imgUrl}"><img style="height:40px; width:40px;" id="${ids.imgUrl}img" src="/${product.imgUrl}" /></td>
          <td id="${ids.price}">${product.price}</td>
          <td id="${ids.numbers}">${product.numbers}</td>
          <td id="${ids.barcode}">${product.barcode}</td>
          <td class="text-wrap" id="${ids.description}">${product.description}</td>
          <td>
            <div class="text-right">
              <button type="button" class="btn btn-secondary"
                id="${ids.detailID}"
                data-toggle="modal"
                data-target="#my-product-dialog-detail"
              >Detail
              </button>
              <button type="button" class="btn btn-secondary"
                id="${ids.editID}"
                data-toggle="modal"
                data-target="#my-product-dialog-new"
              >Edit
              </button>
              <button type="button" class="btn btn-danger"
                id="${ids.deleteID}">Delete
              </button>
            </div>
          </td>
        </tr>
      `;
    }

    // build Id for itemList to know for delete or edit
    const buildIDS = (product, page, size, index) => {
      return {
        stt: (page - 1) * size + index + 1,
        listItemID: "listItem_" + product._id,
        productID: "product_" + product._id,
        title: "title_" + product._id,
        barcode: "barcode_" + product._id,
        description: "description_" + product._id,
        imgUrl: "imgUrl_" + product._id,
        price: 'price_' + product._id,
        numbers: 'numbers_' + product._id,
        editID: "edit_" + product._id,
        deleteID: "delete_" + product._id,
        detailID: "detail_" + product._id
      }
    }

    // handle display product.
    const displayProduct = (data, page, size) => {
      display.empty();
      data.forEach((product, index) => {
        let ids = buildIDS(product, page, size, index);
        display.append(buildTemplate(product, ids));
        detailProduct(product, ids);
        editProduct(product, ids);
        deleteProduct(product, ids);
      });
   }

   // handle reset product Input fields
    resetproductInput = () => { 
      titleProduct.val('');
      $('.custom-file-label')[0].innerText='Browser File';
      $('#image').val('')
      price.val('');
      barcode.val('');
      description.val('');
      numbers.val('');
    }

    // handle submit create product
    form.submit( (e) => {
    e.preventDefault();
    let formd = $('#form-add')[0];
    let formData = new FormData(formd);
    const json = JSON.stringify({
      title: titleProduct.val(),
      price: price.val(),
      barcode: barcode.val(),
      numbers: numbers.val(),
      description: description.val()
    });
    formData.append('file', $('#image'));
    formData.append('data', json);
    // show spinner and backdrop
    spinner.show();
    $('#spnnier-backdrop').addClass('modal-backdrop');
    fetch('/admin/product', {
      method: 'POST',
      body: formData,
    })
    .then((response) => {
      return response.json();
    })
    .then(data => {
      spinner.hide();
      $('#spnnier-backdrop').removeClass('modal-backdrop');
      if (!data.error) {}
      modalNew.removeAttr("display");
      modalNew.attr("display","none");
      closemodal.trigger("click");
      $(".modal-backdrop").remove();
      resetproductInput();
      getProducts(1, 10);
    }); 
  });

    // wait modalNew add class show, if modalNew has class show, in some case, style{display:none}
    //therefore dialog not show
    $('#createNew').click(()=>{
      resetproductInput();
      titleForm.text('Thêm mới sản phẩm');
      buttonName.text('Thêm mới');
      setTimeout(() => {  
        if(modalNew.hasClass('show')){
          modalNew.css("display","block");
        }
      }, 1000);
    });
    
    const detailProduct = (product, ids) => {
      let detailBtn = $(`#${ids.detailID}`);
      detailBtn.click(() => {
        $('#title-form-detail').text('Chi tiết sản phẩm');

        fetch(`/admin/product/${product._id}`, { method: "get" })
          .then(response => response.json())
          .then(async (data) => {
            await $('#titleProductDetail').val(`${data.title}`);
            await $('#imgUrlDetail').attr("src",`/${data.imgUrl}`);
            await $('#priceDetail').val(`${data.price}`);
            await $('#numbersDetail').val(`${data.numbers}`);
            await $('#barcodeDetail').val(`${data.barcode}`);
            await $('#descriptionDetail').text(`${data.description}`);
            let tempString = '';
            await data.position.forEach(value => {
              tempString = tempString.concat(`row: ${value.row.toString()} floor: ${value.floor} index: ${value.index} \n`);
            })

            await $('#positionDetail').text(`${tempString}`);
            await $('#createDetail').text(`${data.createInfo.createTime}`);
            $("#my-product-dialog-detail").css("display","block");
          });
      })
    }

    const editProduct = (product, ids) => {
      
      let editBtn = $(`#${ids.editID}`);

      editBtn.click(() => {
        titleForm.text('Cập nhật sản phẩm');
        buttonName.text('Cập nhật');
        fetch(`/admin/product/${product._id}`, { method: "get" })
          .then(response => response.json())
          .then(async (data) => {
            await titleProduct.val(`${data.title}`);
            await imgUrl.html(`${data.imgUrl}`);
            await price.val(`${data.price}`);
            await barcode.val(`${data.barcode}`);
            await description.text(`${data.description}`);
            $("#my-product-dialog-new").css("display","block");
          });
          // after form shown and user input value and then click "Cap nhat" button
          // handle submit "Cap nhat" button
          form.unbind("submit").submit((e) => {
            e.preventDefault();
            // const formData = new FormData(formd);
            // formData.append('test', 'test');
            const json = JSON.stringify({
              title: titleProduct.val(),
              price: price.val(),
              barcode: barcode.val(),
              description: description.val(),
              imgUrl: imgUrl.val()
            });
            console.log('data update value');
            
            console.log(json);
            
            fetch(`/admin/product/${product._id}`,{
                method: "put",
                headers : {
                  "Content-Type" : "application/json; charset=utf-8"
                },
                body: json
            })
            .then((response) => {
              return response.json();
            })
            .then((data) => {
              console.log(data);
              if (data){
                  // Display new data.
                  const productIndex = $(`#${ids.productID}`);
                  productIndex.text(titleProduct.val() ? titleProduct.val() : data.title);
                  const nimgUrl = $(`#${ids.imgUrl}img`);
                   nimgUrl.attr('src', imgUrl.val() ? imgUrl.val() : data.imgUrl);
                  const nprice = $(`#${ids.price}`);
                  nprice.text(price.val() ? price.val() : data.price);
                  const nbarcode = $(`#${ids.barcode}`);
                  nbarcode.text(barcode.val() ? barcode.val() : data.barcode);
                  const ndescription = $(`#${ids.description}`);
                  ndescription.text(description.val() ? description.val() : data.description);                  
                  // Hide modal
                  modalNew.removeAttr("display");
                  modalNew.attr("display","none");
                  $(".modal-backdrop").remove();
              
              // get messsage here
              }else{
              // get message here
              }
              })
              .catch(err => console.log(err));
          })
      
        }
      )
    }

    const deleteProduct = (product, ids) =>{
      let deleteBtn = $(`#${ids.deleteID}`);
      deleteBtn.click(() => {
        spinner.show();
        $('#spnnier-backdrop').addClass('modal-backdrop');
        fetch(`/admin/product/${product._id}/barcode/${product.barcode}`,{
          method: "delete"
        }).then(response =>{
            return response.json();
        }).then(data => {
          spinner.hide();
          $('#spnnier-backdrop').removeClass('modal-backdrop');
            if(data){
              $(`#${ids.listItemID}`).remove();
            }
        });
      });
    }   
  });

</script>